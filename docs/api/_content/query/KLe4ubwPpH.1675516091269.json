{"_path":"/conventions","_dir":"","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Conventions","description":"Gazel heavily relies on Convention over Configuration design paradigm. In this\nsection you will learn about the conventions in Gazel.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Gazel heavily relies on Convention over Configuration design paradigm. In this\nsection you will learn about the conventions in Gazel."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#dependency-injection"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Dependency Injection"}]}]},{"type":"text","value":": Learn to use\nhow to make use of dependency injection in Gazel"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#business-services"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Business Services"}]}]},{"type":"text","value":": Find out how a\npublic method turns into a business service"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#data-persistence"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Data Persistence"}]}]},{"type":"text","value":": Understand conventions\nfor data persistence"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#relations"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Relations"}]}]},{"type":"text","value":": Explore different ways to create\nrelations between persistent classes"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#queries"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Queries"}]}]},{"type":"text","value":": Learn how to create query services"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#transaction-management"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Transaction Management"}]}]},{"type":"text","value":": Learn\nabout how Gazel manages transactions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#exception-handling"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Exception Handling"}]}]},{"type":"text","value":": See how to write\nexceptions in Gazel"}]}]}]},"article":{"position":2},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Gazel heavily relies on Convention over Configuration design paradigm. In this\nsection you will learn about the conventions in Gazel."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#dependency-injection"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Dependency Injection"}]}]},{"type":"text","value":": Learn to use\nhow to make use of dependency injection in Gazel"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#business-services"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Business Services"}]}]},{"type":"text","value":": Find out how a\npublic method turns into a business service"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#data-persistence"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Data Persistence"}]}]},{"type":"text","value":": Understand conventions\nfor data persistence"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#relations"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Relations"}]}]},{"type":"text","value":": Explore different ways to create\nrelations between persistent classes"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#queries"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Queries"}]}]},{"type":"text","value":": Learn how to create query services"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#transaction-management"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Transaction Management"}]}]},{"type":"text","value":": Learn\nabout how Gazel manages transactions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"/conventions#exception-handling"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Exception Handling"}]}]},{"type":"text","value":": See how to write\nexceptions in Gazel"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:conventions:index.md","_source":"content","_file":"conventions/index.md","_extension":"md"}