[{"_path":"/features/file-system","_dir":"features","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"File System","description":"File system feature basically enables you to read/write file content from/to a\nfile storage.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"File system feature basically enables you to read/write file content from/to a\nfile storage."}]},{"type":"element","tag":"h2","props":{"id":"ifilesystem-interface"},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IFileSystem"}]},{"type":"text","value":" interface"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When an application has this feature, you can directly inject "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IFileSystem"}]},{"type":"text","value":" interface\ninto your business objects. Below is a simple example;"}]},{"type":"element","tag":"code","props":{"code":"public class FileManager\n{\n    private readonly IFileSystem _file;\n    public FileManager(IFileSystem file) => _file = file;\n\n    public await Task<Binary> FetchContent(string path)\n    {\n        return await _file.ReadAsync(path);\n    }\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"public class FileManager\n{\n    private readonly IFileSystem _file;\n    public FileManager(IFileSystem file) => _file = file;\n\n    public await Task<Binary> FetchContent(string path)\n    {\n        return await _file.ReadAsync(path);\n    }\n}\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"configuration-file-system-configuration"},"children":[{"type":"text","value":"Configuration {#file-system-configuration}"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Gazel has a built-in implementation that uses local storage."}]},{"type":"element","tag":"code","props":{"code":"builder.Services.AddGazelServiceApplication(\n    ...\n    fileSystem: c => c.Local(rootPath: \"files\"),\n    ...\n);\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"builder.Services.AddGazelServiceApplication(\n    ...\n    fileSystem: c => c.Local(rootPath: \"files\"),\n    ...\n);\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rootPath"}]},{"type":"text","value":" is given, all files will be stored under this folder. You might\npass an absolute path as well."}]},{"type":"element","tag":"code","props":{"code":"c => c.Local(rootPath: \"/absolute-path\"),\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"c => c.Local(rootPath: \"/absolute-path\"),\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Local storage makes sense for development environment. You may use a network\npath by giving an absolute path as well."}]}]},{"type":"element","tag":"h2","props":{"id":"customization-file-system-customization"},"children":[{"type":"text","value":"Customization {#file-system-customization}"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When you want to store files in a different type of storage, you can implement\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"IFileSystem"}]},{"type":"text","value":" interface and register it using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Custom"}]},{"type":"text","value":" configurer in\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"FileSystemConfigurer"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Assume you've made an S3 implementation of file system interface, you can\nregister it as below;"}]},{"type":"element","tag":"code","props":{"code":"c => c.Custom<S3FileSystem>()\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"c => c.Custom<S3FileSystem>()\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":bulb:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If your implementation depends on some configuration, write a settings class,\nregister it to the IoC and inject it to the file system implementation."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For above example, write a class named "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"S3Settings"}]},{"type":"text","value":" and inject it into\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"S3FileSystem"}]},{"type":"text","value":" class, and then register "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"S3Settings"}]},{"type":"text","value":" to the kernel."}]}]}]},"position":7,"_type":"markdown","_id":"content:features:file-system.md","_source":"content","_file":"features/file-system.md","_extension":"md"},{"_path":"/features/options","_dir":"features","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Options","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"audit"},"children":[{"type":"text","value":"Audit"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"TBD"}]}]},{"type":"element","tag":"h2","props":{"id":"decimal-point"},"children":[{"type":"text","value":"Decimal Point"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"TBD"}]}]},{"type":"element","tag":"h2","props":{"id":"utc"},"children":[{"type":"text","value":"UTC"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"TBD"}]}]}]},"position":101,"_type":"markdown","_id":"content:features:options.md","_source":"content","_file":"features/options.md","_extension":"md"}]