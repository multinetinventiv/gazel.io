[{"_path":"/tutorial/hello-world","_dir":"tutorial","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Hello World","description":"In this tutorial, you will create a hello world service to have a quick feeling\non how Gazel works.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this tutorial, you will create a hello world service to have a quick feeling\non how Gazel works."}]},{"type":"element","tag":"h2","props":{"id":"create-a-hello-world-service"},"children":[{"type":"text","value":"Create a Hello World Service"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To create a new business service, create a class named "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TodoManager"}]},{"type":"text","value":" in\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Inventiv.Sample.Module.Todo"}]},{"type":"text","value":" project."}]},{"type":"element","tag":"code","props":{"code":"Inventiv.Sample\n├── src\n│   ├── Inventiv.Sample.App.Rest\n│   ├── Inventiv.Sample.App.Service\n│   └── Inventiv.Sample.Module.Todo\n│       └── TodoManager.cs\n└── test\n    └── Inventiv.Sample.Test.Todo\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Inventiv.Sample\n├── src\n│   ├── Inventiv.Sample.App.Rest\n│   ├── Inventiv.Sample.App.Service\n│   └── Inventiv.Sample.Module.Todo\n│       └── TodoManager.cs\n└── test\n    └── Inventiv.Sample.Test.Todo\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now add a new method called "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SayHello"}]},{"type":"text","value":" to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TodoManager"}]},{"type":"text","value":" class as shown below."}]},{"type":"element","tag":"code","props":{"code":"namespace Inventiv.Sample.Module.Todo;\n\npublic class TodoManager\n{\n    public string SayHello()\n    {\n        return \"Hello World\";\n    }\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"namespace Inventiv.Sample.Module.Todo;\n\npublic class TodoManager\n{\n    public string SayHello()\n    {\n        return \"Hello World\";\n    }\n}\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" instance methods of classes within "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"module"}]},{"type":"text","value":" projects are directly\nexposed as business "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"services"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Inventiv.Sample.App.Service"}]},{"type":"text","value":" project, and you will see a test page to\nbe able to test your services."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"On the left you will see that Gazel has rendered your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Todo"}]},{"type":"text","value":" "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"module"}]},{"type":"text","value":" and\nlisted "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TodoManager"}]},{"type":"text","value":" class as a "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"service package"}]},{"type":"text","value":", and under "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Todo Manager"}]},{"type":"text","value":" it\nlists your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SayHello"}]},{"type":"text","value":" method as a "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"business service"}]},{"type":"text","value":". Click "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Say Hello"}]},{"type":"text","value":" and\npress "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Call"}]},{"type":"text","value":" button to make a test service request. When you do, you will see a\nresponse saying "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Hello World"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"","src":"/-images/tutorial/hello-world-service.png"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"writing-a-unit-test"},"children":[{"type":"text","value":"Writing a Unit Test"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now that you have implemented the most basic business service, it is time to\ntest it."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a class named "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TodoTest"}]},{"type":"text","value":" in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Inventiv.Sample.Test.Todo"}]},{"type":"text","value":" project."}]},{"type":"element","tag":"code","props":{"code":"Inventiv.Sample\n├── src\n│   ├── Inventiv.Sample.App.Rest\n│   ├── Inventiv.Sample.App.Service\n│   └── Inventiv.Sample.Module.Todo\n│       └── TodoManager.cs\n└── test\n    └── Inventiv.Sample.Test.Todo\n        └── TodoTest.cs\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Inventiv.Sample\n├── src\n│   ├── Inventiv.Sample.App.Rest\n│   ├── Inventiv.Sample.App.Service\n│   └── Inventiv.Sample.Module.Todo\n│       └── TodoManager.cs\n└── test\n    └── Inventiv.Sample.Test.Todo\n        └── TodoTest.cs\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Write below code within this class;"}]},{"type":"element","tag":"code","props":{"code":"using Gazel;\nusing Gazel.UnitTesting;\nusing Inventiv.Sample.Module.Todo;\n\nnamespace Inventiv.Sample.Test.Todo;\n\n[TestFixture]\npublic class TodoTest : TestBase\n{\n    static TodoTest()\n    {\n        Config.RootNamespace = \"Inventiv\";\n    }\n\n    [Test]\n    public void SayHello__says_hello()\n    {\n        var todoManager = Context.Get<TodoManager>();\n\n        Assert.AreEqual(\"Hello World\", todoManager.SayHello());\n    }\n}\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using Gazel;\nusing Gazel.UnitTesting;\nusing Inventiv.Sample.Module.Todo;\n\nnamespace Inventiv.Sample.Test.Todo;\n\n[TestFixture]\npublic class TodoTest : TestBase\n{\n    static TodoTest()\n    {\n        Config.RootNamespace = \"Inventiv\";\n    }\n\n    [Test]\n    public void SayHello__says_hello()\n    {\n        var todoManager = Context.Get<TodoManager>();\n\n        Assert.AreEqual(\"Hello World\", todoManager.SayHello());\n    }\n}\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Context"}]},{"type":"text","value":" property comes from "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TestBase"}]},{"type":"text","value":" which allows you to access IoC\ncontainer. Manager classes are singleton by convention, so you can access to\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TodoManager"}]},{"type":"text","value":" instance by "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Context.Get<TodoManager>()"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"That's it. Now you can run this test to see if it succeeds."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Gazel uses NUnit for unit testing. For more information about NUnit see:\n"},{"type":"element","tag":"a","props":{"href":"https://docs.nunit.org","rel":["nofollow"]},"children":[{"type":"text","value":"NUnit Documentation"}]}]}]},{"type":"element","tag":"h2","props":{"id":"summary-summary-of-hello-world"},"children":[{"type":"text","value":"Summary {#summary-of-hello-world}"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As you can see no configuration is needed to create a new service. Once you've\ncreated your solution and projects, every public class in "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"module"}]},{"type":"text","value":" projects\nbecomes a service package and every public method becomes a service by\nconvention."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now try to add new methods or add parameters, re-run and see the results."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once you are ready, you can proceed to create your first database operation\nusing Gazel."}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here you can download "},{"type":"element","tag":"a","props":{"href":"https://github.com/multinetinventiv/gazel-samples/tree/main/tutorial/hello-world","rel":["nofollow"]},"children":[{"type":"text","value":"source code for this tutorial"}]},{"type":"text","value":"."}]}]},"position":1,"_type":"markdown","_id":"content:tutorial:hello-world.md","_source":"content","_file":"tutorial/hello-world.md","_extension":"md"},{"_path":"/tutorial/persistent-classes","_dir":"tutorial","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Persistent Classes","description":"In this tutorial, you will create a persistent class and make your first\ndatabase operation using Gazel.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this tutorial, you will create a persistent class and make your first\ndatabase operation using Gazel."}]},{"type":"element","tag":"h2","props":{"id":"create-a-persistent-class"},"children":[{"type":"text","value":"Create A Persistent Class"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Database operations are done using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Persistent"}]},{"type":"text","value":" objects."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"An object is "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Persistent"}]},{"type":"text","value":" if its class injects its own repository. For more\ninformation see: "},{"type":"element","tag":"a","props":{"href":"/features#data-persistence"},"children":[{"type":"text","value":"Data Persistence"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a new class named "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TaskCard"}]},{"type":"text","value":" under "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Todo"}]},{"type":"text","value":" module."}]},{"type":"element","tag":"code","props":{"code":"Inventiv.Sample\n├── src\n│   ├── Inventiv.Sample.App.Rest\n│   ├── Inventiv.Sample.App.Service\n│   └── Inventiv.Sample.Module.Todo\n│       ├── TodoManager.cs\n│       └── TaskCard.cs\n└── test\n    └── Inventiv.Sample.Test.Todo\n        └── TodoTest.cs\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Inventiv.Sample\n├── src\n│   ├── Inventiv.Sample.App.Rest\n│   ├── Inventiv.Sample.App.Service\n│   └── Inventiv.Sample.Module.Todo\n│       ├── TodoManager.cs\n│       └── TaskCard.cs\n└── test\n    └── Inventiv.Sample.Test.Todo\n        └── TodoTest.cs\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Add following code to your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TaskCard"}]},{"type":"text","value":" source file."}]},{"type":"element","tag":"code","props":{"code":"using Gazel;\nusing Gazel.DataAccess;\n\nnamespace Inventiv.Sample.Module.Todo;\n\npublic class TaskCard\n{\n    private readonly IRepository<TaskCard> _repository = default!;\n\n    protected TaskCard() { }\n    public TaskCard(IRepository<TaskCard> repository)\n    {\n        _repository = repository;\n    }\n}\n\npublic class TaskCards : Query<TaskCard>\n{\n    public TaskCards(IModuleContext context) : base(context) { }\n}\n\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using Gazel;\nusing Gazel.DataAccess;\n\nnamespace Inventiv.Sample.Module.Todo;\n\npublic class TaskCard\n{\n    private readonly IRepository<TaskCard> _repository = default!;\n\n    protected TaskCard() { }\n    public TaskCard(IRepository<TaskCard> repository)\n    {\n        _repository = repository;\n    }\n}\n\npublic class TaskCards : Query<TaskCard>\n{\n    public TaskCards(IModuleContext context) : base(context) { }\n}\n\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Each "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TaskCard"}]},{"type":"text","value":" object will represent one row in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TaskCard"}]},{"type":"text","value":" table."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TaskCards"}]},{"type":"text","value":" class is registered to IoC as a singleton by convention and it\nwill consist of queries to that table. In this tutorial you will not write\nany queries. Leave this class empty for now."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TaskCard"}]},{"type":"text","value":" class, by injecting its own repository, indicates that its a\npersistent class."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Notice that both classes are subject to dependency injection."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"protected TaskCard() { }"}]},{"type":"text","value":" constructor is there for NHibernate to create\nproxies for lazy loading."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now you can add properties to your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TaskCard"}]},{"type":"text","value":" class as shown below;"}]},{"type":"element","tag":"code","props":{"code":"...\npublic class TaskCard\n{\n    ...\n    public virtual int Id { get; protected set; }\n    public virtual string? Name { get; protected set; }\n    public virtual bool Completed { get; protected set; }\n    ...\n}\n...\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"...\npublic class TaskCard\n{\n    ...\n    public virtual int Id { get; protected set; }\n    public virtual string? Name { get; protected set; }\n    public virtual bool Completed { get; protected set; }\n    ...\n}\n...\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"First property is mandatory for all persistent classes. Gazel requires an\ninteger Id column for every table."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The reason for "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"protected"}]},{"type":"text","value":" setters is to implement domain logic inside\npersistent classes."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"virtual"}]},{"type":"text","value":" keywords are there for NHibernate to create proxies for lazy\nloading."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"These properties are automatically mapped to columns of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TaskCard"}]},{"type":"text","value":" table in\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gazel.tutorial.db"}]},{"type":"text","value":" database."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note that you don't have to create tables and columns in your SQLite\ndatabase.  When in local development mode, Gazel configures NHibernate's\nSQLite connection to automatically create database schema."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now add following method to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TaskCard"}]},{"type":"text","value":" class."}]},{"type":"element","tag":"code","props":{"code":"...\npublic class TaskCard\n{\n    ...\n    protected internal virtual TaskCard With(string? name)\n    {\n        Name = name;\n        Completed = false;\n\n        _repository.Insert(this);\n\n        return this;\n    }\n    ...\n}\n...\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"...\npublic class TaskCard\n{\n    ...\n    protected internal virtual TaskCard With(string? name)\n    {\n        Name = name;\n        Completed = false;\n\n        _repository.Insert(this);\n\n        return this;\n    }\n    ...\n}\n...\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For persistent classes construction is in two steps. First step is the actual\nconstructor, and second step is "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"With"}]},{"type":"text","value":" methods which takes instance arguments\nand inserts a row to database via "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"_repository"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Go to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TodoManager"}]},{"type":"text","value":" class in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Todo"}]},{"type":"text","value":" module and modify its content with the\nfollowing code;"}]},{"type":"element","tag":"code","props":{"code":"using Gazel;\n\nnamespace Inventiv.Sample.Module.Todo;\n\npublic class TodoManager\n{\n    private readonly IModuleContext _context;\n\n    public TodoManager(IModuleContext context)\n    {\n        _context = context;\n    }\n\n    public TaskCard CreateTaskCard(string? name)\n    {\n        return _context.New<TaskCard>().With(name);\n    }\n}\n\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"using Gazel;\n\nnamespace Inventiv.Sample.Module.Todo;\n\npublic class TodoManager\n{\n    private readonly IModuleContext _context;\n\n    public TodoManager(IModuleContext context)\n    {\n        _context = context;\n    }\n\n    public TaskCard CreateTaskCard(string? name)\n    {\n        return _context.New<TaskCard>().With(name);\n    }\n}\n\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You've created a business service named "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"CreateTaskCard"}]},{"type":"text","value":" that inserts a new\ntask card record with the given name. As mentioned above, construction is done\nin two steps;"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The first one is "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"_context.New<TaskCard>()"}]},{"type":"text","value":" which initiates a new "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TaskCard"}]},{"type":"text","value":"\nobject using IoC container,"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"And the second one is "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".With(name)"}]},{"type":"text","value":" which inserts a new record using its own\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"_repository"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"So together you read this as \""},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"new task card with name"}]},{"type":"text","value":"\"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now run "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"App.Service"}]},{"type":"text","value":" project to see your new service "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Create Task Card"}]},{"type":"text","value":" and\ncreate task cards using it."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":" ","src":"/-images/tutorial/create-task-card.png"},"children":[]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note that Id's are assigned from database. This is the default mapping\nconfiguration Gazel applies to NHibernate."}]}]},{"type":"element","tag":"h2","props":{"id":"testing-persistent-objects"},"children":[{"type":"text","value":"Testing Persistent Objects"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Go to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TodoTest"}]},{"type":"text","value":" class in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Test.Todo"}]},{"type":"text","value":" add following test case;"}]},{"type":"element","tag":"code","props":{"code":"...\n[TestFixture]\npublic class TodoTest : TestBase\n{\n    ...\n    [Test]\n    public void CreateTaskCard__creates_a_task_card_using_given_name()\n    {\n        var todoManager = Context.Get<TodoManager>();\n\n        BeginTest();\n\n        var actual = todoManager.CreateTaskCard(\"Write Tests\");\n\n        Verify.ObjectIsPersisted(actual);\n        Assert.AreEqual(\"Write Tests\", actual.Name);\n    }\n    ...\n}\n...\n","language":"csharp"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"...\n[TestFixture]\npublic class TodoTest : TestBase\n{\n    ...\n    [Test]\n    public void CreateTaskCard__creates_a_task_card_using_given_name()\n    {\n        var todoManager = Context.Get<TodoManager>();\n\n        BeginTest();\n\n        var actual = todoManager.CreateTaskCard(\"Write Tests\");\n\n        Verify.ObjectIsPersisted(actual);\n        Assert.AreEqual(\"Write Tests\", actual.Name);\n    }\n    ...\n}\n...\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You may remove "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"SayHello__says_hello"}]},{"type":"text","value":" test case from previous tutorial."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here is what this test does in terms of AAA pattern;"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Arrange"}]},{"type":"text","value":": Gets "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TodoManager"}]},{"type":"text","value":" instance from context"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Act"}]},{"type":"text","value":": Creates a task card named \"Write Tests\""}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Assert"}]},{"type":"text","value":": Verifies that the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TaskCard"}]},{"type":"text","value":" object is persisted and its name is\n\"Write Tests\""}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":":information_source:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"BeginTest()"}]},{"type":"text","value":" call prepares underlying mechanism for the execution of service\nunder test."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Verify property comes from "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TestBase"}]},{"type":"text","value":" class. It basically helps you to check\nif object is persisted or deleted."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When testing, Gazel configures a fake service application in which there is a\ndatabase connection to an in-memory SQLite database. For every test case, it\nbegins a transaction and rollbacks after execution."}]}]},{"type":"element","tag":"h2","props":{"id":"summary-summary-of-persistent-classes"},"children":[{"type":"text","value":"Summary {#summary-of-persistent-classes}"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Like manager classes, persistent classes also follow conventions. In this\ntutorial you've created a table and a create service using no configuration."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now try to add new properties to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"TaskCard"}]},{"type":"text","value":" class or add new persistent\nclasses, re-run and see the results."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once you are ready, you can proceed to learn how to update a record in\ndatabase."}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here you can download "},{"type":"element","tag":"a","props":{"href":"https://github.com/multinetinventiv/gazel-samples/tree/main/tutorial/persistent-classes","rel":["nofollow"]},"children":[{"type":"text","value":"source code for this tutorial"}]},{"type":"text","value":"."}]}]},"position":2,"_type":"markdown","_id":"content:tutorial:persistent-classes.md","_source":"content","_file":"tutorial/persistent-classes.md","_extension":"md"}]